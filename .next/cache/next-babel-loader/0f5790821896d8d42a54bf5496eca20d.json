{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport ufetch from \"../ufetch\";\nexport class Auth {\n  async signup(params) {\n    const query_params = new URLSearchParams(params).toString();\n    return await ufetch(\"/register\", {\n      method: \"POST\",\n      body: query_params\n    });\n  }\n\n  async login(authentication_property, password) {\n    //authentication_property: email or phone number for login\n    // const rs = await axios.post(\"http://51.116.114.155:8080/auth/token\", {\n    //   authentication_property: authentication_property,\n    //   password: password,\n    //   // authentication_property: \"ogembodennis@gmail.com\",\n    //   // password: \"@Beloved2020\",\n    // });\n    // return rs;\n    const data = new URLSearchParams({\n      authentication_property,\n      password\n    }).toString();\n    return await ufetch(\"/auth/token\", {\n      method: \"POST\",\n      body: data\n    });\n  }\n\n  async forgotpassword(authentication_property) {\n    const data = new URLSearchParams(authentication_property).toString();\n    return await ufetch(\"/auth/password-forgotten\", {\n      method: \"POST\",\n      body: data\n    });\n  }\n\n  async generic_query(ctx) {\n    return await ufetch(`/${ctx.endpoint}/${ctx.query_params}`, _objectSpread({\n      method: ctx.method\n    }, ctx.options));\n  }\n\n}","map":{"version":3,"sources":["/home/james/Documents/dev/cp-fe/lib/endpoints/auth.ts"],"names":["ufetch","Auth","signup","params","query_params","URLSearchParams","toString","method","body","login","authentication_property","password","data","forgotpassword","generic_query","ctx","endpoint","options"],"mappings":";;;;;;AAAA,OAAOA,MAAP,MAAmB,WAAnB;AAGA,OAAO,MAAMC,IAAN,CAAW;AAChB,QAAMC,MAAN,CAAaC,MAAb,EAA0B;AACxB,UAAMC,YAAY,GAAG,IAAIC,eAAJ,CAAoBF,MAApB,EAAmCG,QAAnC,EAArB;AACA,WAAO,MAAMN,MAAM,CAAC,WAAD,EAAc;AAC/BO,MAAAA,MAAM,EAAE,MADuB;AAE/BC,MAAAA,IAAI,EAAEJ;AAFyB,KAAd,CAAnB;AAID;;AAED,QAAMK,KAAN,CAAYC,uBAAZ,EAA6CC,QAA7C,EAA+D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,UAAMC,IAAI,GAAG,IAAIP,eAAJ,CAAoB;AAC/BK,MAAAA,uBAD+B;AAE/BC,MAAAA;AAF+B,KAApB,EAGVL,QAHU,EAAb;AAIA,WAAO,MAAMN,MAAM,CAAC,aAAD,EAAgB;AACjCO,MAAAA,MAAM,EAAE,MADyB;AAEjCC,MAAAA,IAAI,EAAEI;AAF2B,KAAhB,CAAnB;AAID;;AAED,QAAMC,cAAN,CAAqBH,uBAArB,EAAsD;AACpD,UAAME,IAAI,GAAG,IAAIP,eAAJ,CAAoBK,uBAApB,EAA6CJ,QAA7C,EAAb;AACA,WAAO,MAAMN,MAAM,CAAC,0BAAD,EAA6B;AAC9CO,MAAAA,MAAM,EAAE,MADsC;AAE9CC,MAAAA,IAAI,EAAEI;AAFwC,KAA7B,CAAnB;AAID;;AAED,QAAgBE,aAAhB,CAA8BC,GAA9B,EAAwC;AACtC,WAAO,MAAMf,MAAM,CAAE,IAAGe,GAAG,CAACC,QAAS,IAAGD,GAAG,CAACX,YAAa,EAAtC;AACjBG,MAAAA,MAAM,EAAEQ,GAAG,CAACR;AADK,OAEdQ,GAAG,CAACE,OAFU,EAAnB;AAID;;AA1Ce","sourcesContent":["import ufetch from \"../ufetch\";\nimport axios from \"axios\";\n\nexport class Auth {\n  async signup(params: any) {\n    const query_params = new URLSearchParams(params as any).toString();\n    return await ufetch(\"/register\", {\n      method: \"POST\",\n      body: query_params,\n    });\n  }\n\n  async login(authentication_property: string, password: string) {\n    //authentication_property: email or phone number for login\n    // const rs = await axios.post(\"http://51.116.114.155:8080/auth/token\", {\n    //   authentication_property: authentication_property,\n    //   password: password,\n    //   // authentication_property: \"ogembodennis@gmail.com\",\n    //   // password: \"@Beloved2020\",\n    // });\n\n    // return rs;\n    const data = new URLSearchParams({\n      authentication_property,\n      password,\n    }).toString();\n    return await ufetch(\"/auth/token\", {\n      method: \"POST\",\n      body: data,\n    });\n  }\n\n  async forgotpassword(authentication_property: string) {\n    const data = new URLSearchParams(authentication_property).toString();\n    return await ufetch(\"/auth/password-forgotten\", {\n      method: \"POST\",\n      body: data,\n    });\n  }\n\n  protected async generic_query(ctx: any) {\n    return await ufetch(`/${ctx.endpoint}/${ctx.query_params}`, {\n      method: ctx.method,\n      ...ctx.options,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}