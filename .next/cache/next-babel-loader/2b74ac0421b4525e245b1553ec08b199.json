{"ast":null,"code":"const ufetch = async (endpoint, options = {}) => {\n  const api_url = process.env.URL;\n  let l_storage = localStorage.getItem(\"cp-a\");\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\"\n  };\n\n  if (l_storage) {\n    l_storage = JSON.parse(l_storage);\n    headers[\"Authorization\"] = `Bearer ${l_storage.access}`;\n  }\n\n  if (options !== undefined) {\n    if (options.headers) {\n      for (let h in options.headers) {\n        headers[h] = options.headers[h];\n      }\n    }\n  }\n\n  options.headers = headers;\n  let results = null;\n  let dbugText = null;\n  let data = null;\n\n  try {\n    results = await fetch(`${api_url}${endpoint}`, options);\n    dbugText = await results.text();\n\n    try {\n      // console.log(dbugText);\n      data = JSON.parse(dbugText);\n    } catch (e) {\n      return {\n        error: dbugText\n      };\n    }\n\n    if (data.error) {}\n\n    return data;\n  } catch (e) {\n    return {\n      error: e.message\n    };\n  }\n};\n\nexport const refreshTOken = async l_storage => {\n  try {\n    let response = await fetch(\"/token/refresh/\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        refresh: l_storage.refresh\n      })\n    });\n    let responseData = await response.text();\n    return JSON.parse(responseData);\n  } catch (e) {\n    return {\n      error: e.message\n    };\n  }\n};\nexport default ufetch;","map":{"version":3,"sources":["/home/james/Documents/dev/cp-fe/lib/ufetch.js"],"names":["ufetch","endpoint","options","api_url","process","env","URL","l_storage","localStorage","getItem","headers","Accept","JSON","parse","access","undefined","h","results","dbugText","data","fetch","text","e","error","message","refreshTOken","response","method","body","stringify","refresh","responseData"],"mappings":"AAAA,MAAMA,MAAM,GAAG,OAAOC,QAAP,EAAiBC,OAAO,GAAG,EAA3B,KAAkC;AAC/C,QAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,GAA5B;AACA,MAAIC,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAhB;AACA,QAAMC,OAAO,GAAG;AACd,oBAAgB,kBADF;AAEdC,IAAAA,MAAM,EAAE;AAFM,GAAhB;;AAKA,MAAIJ,SAAJ,EAAe;AACbA,IAAAA,SAAS,GAAGK,IAAI,CAACC,KAAL,CAAWN,SAAX,CAAZ;AACAG,IAAAA,OAAO,CAAC,eAAD,CAAP,GAA4B,UAASH,SAAS,CAACO,MAAO,EAAtD;AACD;;AAED,MAAIZ,OAAO,KAAKa,SAAhB,EAA2B;AACzB,QAAIb,OAAO,CAACQ,OAAZ,EAAqB;AACnB,WAAK,IAAIM,CAAT,IAAcd,OAAO,CAACQ,OAAtB,EAA+B;AAC7BA,QAAAA,OAAO,CAACM,CAAD,CAAP,GAAad,OAAO,CAACQ,OAAR,CAAgBM,CAAhB,CAAb;AACD;AACF;AACF;;AACDd,EAAAA,OAAO,CAACQ,OAAR,GAAkBA,OAAlB;AAEA,MAAIO,OAAO,GAAG,IAAd;AACA,MAAIC,QAAQ,GAAG,IAAf;AACA,MAAIC,IAAI,GAAG,IAAX;;AAEA,MAAI;AACFF,IAAAA,OAAO,GAAG,MAAMG,KAAK,CAAE,GAAEjB,OAAQ,GAAEF,QAAS,EAAvB,EAA0BC,OAA1B,CAArB;AACAgB,IAAAA,QAAQ,GAAG,MAAMD,OAAO,CAACI,IAAR,EAAjB;;AACA,QAAI;AACF;AACAF,MAAAA,IAAI,GAAGP,IAAI,CAACC,KAAL,CAAWK,QAAX,CAAP;AACD,KAHD,CAGE,OAAOI,CAAP,EAAU;AACV,aAAO;AAAEC,QAAAA,KAAK,EAAEL;AAAT,OAAP;AACD;;AACD,QAAIC,IAAI,CAACI,KAAT,EAAgB,CACf;;AACD,WAAOJ,IAAP;AACD,GAZD,CAYE,OAAOG,CAAP,EAAU;AACV,WAAO;AAAEC,MAAAA,KAAK,EAAED,CAAC,CAACE;AAAX,KAAP;AACD;AACF,CAzCD;;AA2CA,OAAO,MAAMC,YAAY,GAAG,MAAOlB,SAAP,IAAqB;AAC/C,MAAI;AACF,QAAImB,QAAQ,GAAG,MAAMN,KAAK,CAAC,iBAAD,EAAoB;AAC5CO,MAAAA,MAAM,EAAE,MADoC;AAE5CjB,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE;AAFD,OAFmC;AAM5CiB,MAAAA,IAAI,EAAEhB,IAAI,CAACiB,SAAL,CAAe;AAAEC,QAAAA,OAAO,EAAEvB,SAAS,CAACuB;AAArB,OAAf;AANsC,KAApB,CAA1B;AAQA,QAAIC,YAAY,GAAG,MAAML,QAAQ,CAACL,IAAT,EAAzB;AAEA,WAAOT,IAAI,CAACC,KAAL,CAAWkB,YAAX,CAAP;AACD,GAZD,CAYE,OAAOT,CAAP,EAAU;AACV,WAAO;AAAEC,MAAAA,KAAK,EAAED,CAAC,CAACE;AAAX,KAAP;AACD;AACF,CAhBM;AAiBP,eAAexB,MAAf","sourcesContent":["const ufetch = async (endpoint, options = {}) => {\n  const api_url = process.env.URL;\n  let l_storage = localStorage.getItem(\"cp-a\");\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n  };\n\n  if (l_storage) {\n    l_storage = JSON.parse(l_storage);\n    headers[\"Authorization\"] = `Bearer ${l_storage.access}`;\n  }\n\n  if (options !== undefined) {\n    if (options.headers) {\n      for (let h in options.headers) {\n        headers[h] = options.headers[h];\n      }\n    }\n  }\n  options.headers = headers;\n\n  let results = null;\n  let dbugText = null;\n  let data = null;\n\n  try {\n    results = await fetch(`${api_url}${endpoint}`, options);\n    dbugText = await results.text();\n    try {\n      // console.log(dbugText);\n      data = JSON.parse(dbugText);\n    } catch (e) {\n      return { error: dbugText };\n    }\n    if (data.error) {\n    }\n    return data;\n  } catch (e) {\n    return { error: e.message };\n  }\n};\n\nexport const refreshTOken = async (l_storage) => {\n  try {\n    let response = await fetch(\"/token/refresh/\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({ refresh: l_storage.refresh }),\n    });\n    let responseData = await response.text();\n\n    return JSON.parse(responseData);\n  } catch (e) {\n    return { error: e.message };\n  }\n};\nexport default ufetch;\n"]},"metadata":{},"sourceType":"module"}