{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/home/james/Documents/dev/cp-fe/contextStore/sampleindex.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createContext, useReducer } from \"react\"; //import { createInterface } from \"readline\";\n//import { types } from 'util';\n\nexport var MyContext = createContext(\"\");\nvar allData = new Array(25).fill(0).map(function (_val, i) {\n  return i + 1;\n});\nvar perPage = 10;\nvar types = {\n  start: \"START\",\n  loaded: \"LOADED\"\n};\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case types.start:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true\n      });\n\n    case types.loaded:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        data: [].concat(_toConsumableArray(state.data), _toConsumableArray(action.newData)),\n        more: action.newData.length === perPage,\n        after: state.after + action.newData.length\n      });\n\n    default:\n      throw new Error(\"Don't understand action\");\n  }\n};\n\nexport var ContextWrapper = function ContextWrapper(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useReducer = useReducer(reducer, {\n    loading: false,\n    more: true,\n    data: [],\n    after: 0\n  }),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var loading = state.loading,\n      data = state.data,\n      after = state.after,\n      more = state.more;\n\n  var load = function load() {\n    dispatch({\n      type: types.start\n    });\n    setTimeout(function () {\n      var newData = allData.slice(after, after * perPage);\n      dispatch({\n        type: types.loaded,\n        newData: newData\n      });\n    }, 300);\n  };\n\n  return __jsx(MyContext.Provider, {\n    value: {\n      loading: loading,\n      data: data,\n      more: more,\n      load: load\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 3\n    }\n  }, children);\n};\n\n_s(ContextWrapper, \"DQskiRUWFaSf5A40Hs4kuPXrlZQ=\");\n\n_c = ContextWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextWrapper\");","map":{"version":3,"sources":["/home/james/Documents/dev/cp-fe/contextStore/sampleindex.tsx"],"names":["createContext","useReducer","MyContext","allData","Array","fill","map","_val","i","perPage","types","start","loaded","reducer","state","action","type","loading","data","newData","more","length","after","Error","ContextWrapper","children","dispatch","load","setTimeout","slice"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C,C,CACA;AACA;;AAEA,OAAO,IAAMC,SAAS,GAAGF,aAAa,CAAe,EAAf,CAA/B;AASP,IAAMG,OAAO,GAAG,IAAIC,KAAJ,CAAU,EAAV,EAAcC,IAAd,CAAmB,CAAnB,EAAsBC,GAAtB,CAA0B,UAACC,IAAD,EAAOC,CAAP;AAAA,SAAaA,CAAC,GAAG,CAAjB;AAAA,CAA1B,CAAhB;AACI,IAAMC,OAAO,GAAG,EAAhB;AACA,IAAMC,KAAK,GAAG;AACdC,EAAAA,KAAK,EAAE,OADO;AAEdC,EAAAA,MAAM,EAAE;AAFM,CAAd;;AAKJ,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAkBC,MAAlB,EAA6B;AAC5C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,KAAK,CAACC,KAAX;AACD,6CAAYG,KAAZ;AAAmBG,QAAAA,OAAO,EAAE;AAA5B;;AACC,SAAKP,KAAK,CAACE,MAAX;AACD,6CACKE,KADL;AAEEG,QAAAA,OAAO,EAAE,KAFX;AAGEC,QAAAA,IAAI,+BAAMJ,KAAK,CAACI,IAAZ,sBAAqBH,MAAM,CAACI,OAA5B,EAHN;AAIEC,QAAAA,IAAI,EAAEL,MAAM,CAACI,OAAP,CAAeE,MAAf,KAA0BZ,OAJlC;AAKEa,QAAAA,KAAK,EAAER,KAAK,CAACQ,KAAN,GAAcP,MAAM,CAACI,OAAP,CAAeE;AALtC;;AAOC;AACD,YAAM,IAAIE,KAAJ,CAAU,yBAAV,CAAN;AAZD;AAcA,CAfD;;AAiBA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,OAAkB;AAAA;;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,oBACrBxB,UAAU,CAACY,OAAD,EAAU;AACvCI,IAAAA,OAAO,EAAE,KAD8B;AAEvCG,IAAAA,IAAI,EAAE,IAFiC;AAGvCF,IAAAA,IAAI,EAAE,EAHiC;AAIvCI,IAAAA,KAAK,EAAE;AAJgC,GAAV,CADW;AAAA,MACxCR,KADwC;AAAA,MACjCY,QADiC;;AAAA,MAOvCT,OAPuC,GAORH,KAPQ,CAOvCG,OAPuC;AAAA,MAO9BC,IAP8B,GAORJ,KAPQ,CAO9BI,IAP8B;AAAA,MAOxBI,KAPwB,GAORR,KAPQ,CAOxBQ,KAPwB;AAAA,MAOjBF,IAPiB,GAORN,KAPQ,CAOjBM,IAPiB;;AAS/C,MAAMO,IAAI,GAAG,SAAPA,IAAO,GAAM;AACZD,IAAAA,QAAQ,CAAC;AAAEV,MAAAA,IAAI,EAAEN,KAAK,CAACC;AAAd,KAAD,CAAR;AAEAiB,IAAAA,UAAU,CAAC,YAAM;AACb,UAAMT,OAAO,GAAGhB,OAAO,CAAC0B,KAAR,CAAcP,KAAd,EAAqBA,KAAK,GAAGb,OAA7B,CAAhB;AACAiB,MAAAA,QAAQ,CAAC;AAAEV,QAAAA,IAAI,EAAEN,KAAK,CAACE,MAAd;AAAsBO,QAAAA,OAAO,EAAPA;AAAtB,OAAD,CAAR;AAEH,KAJS,EAIP,GAJO,CAAV;AAKH,GARJ;;AASA,SACC,MAAC,SAAD,CAAW,QAAX;AAAoB,IAAA,KAAK,EAAE;AAAEF,MAAAA,OAAO,EAAPA,OAAF;AAAWC,MAAAA,IAAI,EAAJA,IAAX;AAAiBE,MAAAA,IAAI,EAAJA,IAAjB;AAAuBO,MAAAA,IAAI,EAAJA;AAAvB,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2DF,QAA3D,CADD;AAGA,CArBM;;GAAMD,c;;KAAAA,c","sourcesContent":["import { createContext, useReducer } from \"react\";\n//import { createInterface } from \"readline\";\n//import { types } from 'util';\n\nexport const MyContext = createContext<string | any>(\"\")\n\ninterface ILoading  {\n\tafter: number,\n\tloading: boolean,\n\tmore: boolean,\n\tdata: any\n}\n\nconst allData = new Array(25).fill(0).map((_val, i) => i + 1);\n    const perPage = 10;\n    const types = {\n    start: \"START\",\n    loaded: \"LOADED\"\n    };\n\nconst reducer = (state: ILoading, action) => {\n\tswitch (action.type) {\n\t  case types.start:\n\t\treturn { ...state, loading: true };\n\t  case types.loaded:\n\t\treturn {\n\t\t  ...state,\n\t\t  loading: false,\n\t\t  data: [...state.data, ...action.newData],\n\t\t  more: action.newData.length === perPage,\n\t\t  after: state.after + action.newData.length\n\t\t};\n\t  default:\n\t\tthrow new Error(\"Don't understand action\");\n\t}\n};\n\nexport const ContextWrapper = ({ children }) => {\n\tconst [state, dispatch] = useReducer(reducer, {\n        loading: false,\n        more: true,\n        data: [],\n        after: 0\n\t})\n\tconst { loading, data, after, more } = state;\n\n\tconst load = () => {\n        dispatch({ type: types.start });\n    \n        setTimeout(() => {\n            const newData = allData.slice(after, after * perPage);\n            dispatch({ type: types.loaded, newData });\n            \n        }, 300);\n    }\n\treturn (\n\t\t<MyContext.Provider value={{ loading, data, more, load }}>{children}</MyContext.Provider>\n\t);\n};\n"]},"metadata":{},"sourceType":"module"}