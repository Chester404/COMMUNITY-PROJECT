{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Head from \"next/head\";\nimport Layout from \"../../components/Layout\";\nimport Link from \"next/link\";\nimport Form from \"react-bootstrap/Form\"; // import Button from \"react-bootstrap/Button\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEye } from \"@fortawesome/free-solid-svg-icons\";\n\nconst eye = __jsx(FontAwesomeIcon, {\n  icon: faEye\n}); // import styles from \"./styles.module.css\";\n\n\nimport emailValidation from \"../../utils/emailValidation\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport Prompt from \"../../components/Prompt\";\n\nconst Signup = () => {\n  let data;\n  const {\n    0: validated,\n    1: setValidated\n  } = useState(false);\n  const {\n    0: email,\n    1: setEmail\n  } = useState(\"\"); // const [phoneNumber, setPhoneNumber] = useState(\"\");\n\n  const {\n    0: emailValidity,\n    1: setEmailValidity\n  } = useState(\"invalid\"); // const [phoneValidity, setPhoneValidity] = useState(\"invalid\");\n\n  const {\n    0: password,\n    1: setPassword\n  } = useState(\"\");\n  const {\n    0: confirmPassword,\n    1: setConfirmPassword\n  } = useState(\"mismatch\");\n  const {\n    0: passwordFieldValidity,\n    1: setPasswordFieldValidity\n  } = useState(\"invalid\");\n  const {\n    0: userType,\n    1: setUserType\n  } = useState(\"Individual\");\n  const {\n    0: isSent,\n    1: setIsSent\n  } = useState(false);\n  const {\n    0: passwordShown,\n    1: setPasswordShown\n  } = useState(false);\n  const {\n    0: show,\n    1: setShow\n  } = useState(false); // const [userName, setUserName] = useState(\"\");\n  // const [firstName, setFirstName] = useState(\"\");\n  // const [lastName, setLastName] = useState(\"\");\n\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: promptBody,\n    1: setPromptBody\n  } = useState(\"\");\n  const {\n    0: linkTo,\n    1: setLinkTo\n  } = useState(null);\n  const {\n    0: linkText,\n    1: setLinkText\n  } = useState(null);\n  const {\n    0: promptTitle,\n    1: setPromptTitle\n  } = useState(\"\");\n  const {\n    0: is_organization,\n    1: setIsOrganization\n  } = useState(false);\n\n  const handleShow = () => setShow(true);\n\n  const handleClose = () => setShow(false); // Toggle Password Visibility\n\n\n  const togglePasswordVisiblity = () => {\n    setPasswordShown(passwordShown ? false : true);\n  };\n\n  const loader = () => __jsx(\"span\", {\n    className: \"spinner-border spinner-border-sm\",\n    role: \"status\",\n    \"aria-hidden\": \"true\",\n    style: {\n      width: \"1.5rem\",\n      height: \"1.5rem\"\n    }\n  }); // Email Phone Validation\n\n\n  const validateEmail = e => {\n    if (emailValidation(e.target.value)) {\n      setEmail(e.target.value);\n      setEmailValidity(\"valid\");\n    } else {\n      setEmailValidity(\"invalid\");\n    }\n  }; // const validatePhone = (e) => {\n  //   if (phoneValidation(e.target.value)) {\n  //     setPhoneNumber(e.target.value);\n  //     setPhoneValidity(\"valid\");\n  //   } else {\n  //     setPhoneValidity(\"invalid\");\n  //   }\n  // };\n  // Password Validation\n\n\n  const validatePassword = e => {\n    console.log(confirmPassword, password);\n\n    if (e.target.value.match(/[a-z]/g) && e.target.value.match(/[A-Z]/g) && e.target.value.match(/[0-9]/g) && e.target.value.match(/[^a-zA-Z\\d]/g) && e.target.value.length >= 8) {\n      // res = \"TRUE\";\n      setPassword(e.target.value);\n      setPasswordFieldValidity(\"valid\");\n    } else {\n      // console.log(\"invalid password\")\n      setPasswordFieldValidity(\"invalid\");\n    }\n  };\n\n  const confirmPasswordMatch = e => {\n    if (e.target.value === password) {\n      setConfirmPassword(\"match\"); // data.first_name = firstName\n      // data.last_name = lastName\n      // data.email = email\n      // data.password = password\n      // data.phone_number = phoneNumber\n      // data.user_type = userType\n    } else {\n      setConfirmPassword(\"mismatch\");\n    }\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n\n    if (form.checkValidity() === false) {\n      setPromptTitle(\"Error\");\n      setShow(true);\n      setPromptBody(\"Invalid data input.\");\n      event.stopPropagation();\n      return;\n    }\n\n    console.log(\"Here\");\n\n    if (email && password && confirmPassword === \"match\") {\n      setLoading(true);\n\n      try {\n        const result = await axios.post(\"http://51.116.114.155:8080/auth/registration/\", {\n          email: email,\n          password: password,\n          is_organization: is_organization\n        });\n\n        if (result) {\n          setLoading(false);\n          console.log(\"RESULT:\", result);\n\n          if (result.status === 200 || result.statusText === \"Created\") {\n            // go to landing page\n            setPromptBody(\"A confirmation has been sent to your email. Please retrieve the code and confirm acount\");\n            setLinkTo(\"confirmaccount\");\n            setLinkText(\"Confirm Account\");\n            setShow(true);\n            setLoading(false);\n          }\n        }\n      } catch (err) {\n        console.log(err.message);\n\n        if (err.message === \"Request failed with status code 400\") {\n          setPromptBody(\"User with this email already exists\");\n          setLinkText(null);\n          setLinkTo(null);\n          setShow(true);\n          setLoading(false);\n        } else if (err.message === \"Request failed with status code 404\") {// bad endpoint\n        } else if (err.message === \"Network Error\") {\n          // bad network connection\n          setPromptBody(\"Please check your network connection and try again.\");\n          setShow(true);\n          setLoading(false);\n        }\n      }\n    } else {\n      setPromptTitle(\"Password\");\n      setShow(true);\n      setPromptBody(\"Invalid data input. Passwords mismatch\");\n    }\n  };\n\n  return __jsx(Layout, null, __jsx(Head, null, __jsx(\"link\", {\n    rel: \"stylesheet\",\n    type: \"text/css\",\n    href: \"/auth.css\"\n  })), __jsx(Prompt // body={`A confirmation has been sent to your email. Please retrieve the code and\n  // confirm acount`}\n  , {\n    title: promptTitle,\n    linkTo: linkTo,\n    linkText: linkText,\n    show: show,\n    handleClose: handleClose\n  }, __jsx(\"p\", null, promptBody)), __jsx(\"div\", {\n    style: {\n      textAlign: \"center\"\n    }\n  }, __jsx(\"div\", null, __jsx(\"img\", {\n    src: \"/images/Logo.png\"\n  })), __jsx(\"div\", null, __jsx(\"b\", null, \"Make the most out of your business\")), __jsx(\"div\", null, \"Already on Market Circle?\", \" \", __jsx(Link, {\n    href: \"/auth/login\"\n  }, __jsx(\"a\", null, __jsx(\"b\", null, \"Log in\"))))), \" \", __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(Form, {\n    noValidate: true,\n    validated: validated,\n    onSubmit: handleSubmit,\n    style: {\n      width: \"100%\",\n      padding: 40\n    }\n  }, __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", null, \"Email\"), __jsx(\"input\", {\n    type: \"text\",\n    id: \"signup_email\",\n    className: \"form-control\",\n    placeholder: \"Please enter a valid email..\",\n    required: true,\n    defaultValue: email,\n    onChange: validateEmail\n  }), __jsx(\"small\", {\n    id: \"emailHelp\",\n    className: \"form-text text-muted\"\n  }, emailValidity), __jsx(\"div\", {\n    className: \"invalid-feedback\"\n  }, \"Please enter valid email.\")), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", null, \"Password\"), __jsx(\"input\", {\n    className: \"form-control\",\n    id: \"signup_password\",\n    type: passwordShown ? \"text\" : \"password\",\n    placeholder: \"Password must be atleast 8 characters long.\",\n    required: true,\n    defaultValue: password,\n    onChange: validatePassword\n  }), __jsx(\"i\", {\n    onClick: togglePasswordVisiblity\n  }, eye), __jsx(\"small\", {\n    id: \"emailHelp\",\n    className: \"form-text text-muted\"\n  }, passwordFieldValidity)), __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"label\", null, \"Confirm Password\"), __jsx(\"input\", {\n    id: \"signup_confirm_password\",\n    className: \"form-control\",\n    type: \"password\",\n    placeholder: \"Password must be atleast 8 characters long.\",\n    required: true // defaultValue={confirmPassword}\n    ,\n    onChange: confirmPasswordMatch\n  }), __jsx(\"small\", {\n    id: \"emailHelp\",\n    className: \"form-text text-muted\"\n  }, confirmPassword)), __jsx(\"div\", {\n    className: \"mb-3 text-center\"\n  }, __jsx(\"div\", {\n    className: \"form-check form-check-inline\"\n  }, __jsx(\"input\", {\n    className: \"form-check-input\",\n    type: \"radio\",\n    id: \"inline-radio-1\",\n    name: \"radioButton\" // checked={userType === \"Organization\"}\n    ,\n    value: \"Organization\",\n    onChange: e => setUserType(e.target.value)\n  }), __jsx(\"label\", {\n    className: \"form-check-label\",\n    htmlFor: \"inline-radio-1\"\n  }, \"Organization\")), __jsx(\"div\", {\n    className: \"form-check form-check-inline\"\n  }, __jsx(\"input\", {\n    className: \"form-check-input\",\n    type: \"radio\",\n    id: \"inline-radio-2\",\n    name: \"radioButton\",\n    checked: userType === \"Individual\",\n    value: \"Individual\",\n    onChange: e => setUserType(e.target.value)\n  }), __jsx(\"label\", {\n    className: \"form-check-label\",\n    htmlFor: \"inline-radio-2\"\n  }, \"Individual\"))), __jsx(\"button\", {\n    id: \"signup_button\",\n    className: \"btn btn-primary btn-lg btn-block\",\n    type: \"submit\"\n  }, loading ? loader() : null, \"Signup\"))));\n};\n\nexport default Signup;","map":null,"metadata":{},"sourceType":"module"}