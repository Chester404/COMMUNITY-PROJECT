{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport ufetch from \"../ufetch\";\nimport axios from \"axios\";\nexport class Auth {\n  async signup(params) {\n    const query_params = new URLSearchParams(params).toString();\n    return await ufetch(\"/register\", {\n      method: \"POST\",\n      body: query_params\n    });\n  }\n\n  async login(authentication_property, password) {\n    //authentication_property: email or phone number for login\n    const rs = await axios.post(\"http://51.116.114.155:8080/auth/token\", {\n      authentication_property: authentication_property,\n      password: password // authentication_property: \"ogembodennis@gmail.com\",\n      // password: \"@Beloved2020\",\n\n    });\n    return rs; // const data = new URLSearchParams({\n    //   authentication_property,\n    //   password,\n    // }).toString();\n    // return await ufetch(\"/auth/token\", {\n    //   method: \"POST\",\n    //   body: data,\n    // });\n  }\n\n  async forgotpassword(authentication_property) {\n    const data = new URLSearchParams(authentication_property).toString();\n    return await ufetch(\"/auth/password-forgotten\", {\n      method: \"POST\",\n      body: data\n    });\n  }\n\n  async generic_query(ctx) {\n    return await ufetch(`/${ctx.endpoint}/${ctx.query_params}`, _objectSpread({\n      method: ctx.method\n    }, ctx.options));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}